/**
 * Состояние игры Сокровища и монстры - поле, фигуры, игрок
 *
 * метафора карточной игры
 * - карты не меняются
 *
 * - архитектура флагов
 * ---- если у карты есть уникальное состояние, отличающеея от дефолтного
 * ---- оно обозначается через поле стейта с доступом по id
 *
 * Что должно отображать
 * - типы поверхностей
 * - подземелья на карте (скрывают остальных кроме игрок)
 * - монстры на карте (скрывают сокровища и тащат за собой)
 * - сокровища на карте
 * - карту игрока на поле
 * - стату игрока - здоровье, атаку, сокровища, собранные им сокровища
 * - убитые монстры
 * - вскрытые подземелья
 *
 * Что должно восстанавливать в начале игры
 * - все ячейки
 * - все подземелья со статусом открыто или нет
 * - всех выживших и убитых монстров
 * - все сокровища, собранные во время игры
 *
 * Когда меняется стейт?
 * - начало игры, восстановление из сейва
 * - перемещение игрока с ячейки на ячейку
 * - перемещение монстра с ячейки на ячейку
 * - начало боя? Бой имеет свой стейт? пока ограничимся что нет
 * - окончание боя
 *
 * Столкновение с сокровищем
 * - сокровище уходит с поля
 * - сокровище уходит к игроку
 *
 * Столкновение с монстром - бой
 * - атака монстра больше
 *    - игрок теряет 1 жизнь и имеет право ходить
 *    - монстр остается на той же ячейке (не движется в текущей концепции)
 *    - сокровище монстра остается на той же ячейке
 * - атака игрока больше
 *    - монстр уходит на кладбище
 *    - сокровище уходит с поля к игроку
 *
 * Столкновение с сокровищем
 *    - сокровище уходит с поля к игроку
 *    - бонусы сокровища  меняют состояние игрока - атаку, здоровье, золото
 *
 * Условие геймувера
 * - WIN сокровища собраны до определенной нормы и жизнь игрока > 0
 * - FAIL - игрок убит, жизнь игрока <= 0
 **/
export interface TMGameState {
  /** нормализованные базы с быстрым доступом по id **/
  records: {
    /** ячейки поля **/
    cellTypes: Record<Id, ICellType>;
    /** правила земли - тип, скорость перемещения, частота генерации **/
    terrainRules: Record<Id, ITerrainRule>;
    /** доступные карты в игре **/
    cards: Record<Id, ICard>;
  };

  /**
   *  Общий массив ячеек - он создается в начале игры
   *  хранит типы ячеек
   *  не изменяем
   *  Id - cellTypes
   **/
  cells: Id[][];


  /**
   * Карта игрока - в данной игре одна
   * Id - cards
   */
  playerHeroCardId: Id;
  playerHeroCardPlace: ColumnRow;
  /** сокровища игрока не видны на поле, но влияют на его параметры **/
  playerTreasures: CardFlagRecord;
  /** параметры которые могут меняться от сбора сокровищ  **/

  /** @subscribe -UI-subscribe **/
  playerHealth: number;
  /** @subscribe -UI-subscribe **/
  playerGold: number;
  /** @subscribe -UI-subscribe **/
  playerAttack: number;
  /**
   * монстр который убьет игрока
   * - для показа в статистике и геймовере
   *
   * Id - cards
   * **/
  playerKiller?: Id;

  /**
   * Монстры на поле
   * - видны на поле, если их координаты не совпадают с закрытым подземельем
   * - СКРЫВАЮТ сокровища с совпадающими координатами
   * - ... если будут перемещаться - будут передвигать за собой сокровища с теми же координатами
   * что означает что монстры будут собирать сокровища тоже
   *
   * Id - cards
   **/
  monstersInGame: CardsInGameRecord;

  /** Поверженные монстры
   *
   * Id - cards
   * **/
  monstersGraveYard: CardFlagRecord;

  /**
   * Сокровища
   * - видны на поле, если их координаты не совпадают с закрытым подземельем или сокровищем
   *
   * Id - cards
   **/
  treasuresInGame: CardsInGameRecord;

  /** Подземелья
   *  - СКРЫВАЮТ  сокровища и монстров с теми же координатами, пока подземелье не откроют
   *
   *  Id - cards
   ***/

  dungeonsInGame: CardsInGameRecord;

  /** вскрытые подземелья помечаются этой записью
   * Id - cards **/
  dungeonsOpened: CardFlagRecord;
}

/*********************
 * Базовые типы
 * ******************/

/**
 * уникальный идентификатор карты в игре
 * это не означает уникальность карты по типу и свойствам
 * это просто идентификатор для всех карт,
 * несколько одинаковых монстров должны иметь разные id и тд
 * допустим в колоду добавили три гоблина
 * у каждого гоблина будет разны id
 **/
type Id = number;

/** рекорды для записи флагов карт,
 * должны уверенно типизировать неопределенность **/
type CardFlagRecord = Record<Id, boolean | undefined>;

/** рекорды для записи положения карт на поле, должны уверенно типизировать неопределенность **/
type CardsInGameRecord = Record<ColumnRowNumber, Id | undefined>;


export interface ColumnRow {
  column: number;
  row: number;
};

/** число которое кодирует column, row в одно число
 *  по формуле
 *  const columnRowNumber = column + row * columns
 **/
export type ColumnRowNumber = number;

interface ICellType {
  id: Id;
  terrainRuleId: Id;
}

export interface ITerrainRule {
  id: Id;
  type: string;
  speedK: number;
  probability: number;
}

/**
 * карты в игре
 * - персонажи
 * - монстры
 * - сокровища деньги
 * - сокровища артефакты
 * - подземелья, в которых хранится что
 * - ... расширим потом, типа наземных строений
 **/
export interface ICard {
  id: Id;
  type: CardType;
  title: string;
  description: number;
  quote: string;
}

export enum CardType {
  /** герой или монстр, параметры одинаковы, это сущность которая живет и дерется и движется сама **/
  creature = "creature",
  /** сокровища с денежным или иным эффектом - переходят к существами или валяются просто так **/
  treasure = "treasure",
  /** локация, в которой неизвестно что скрывается - пока такой функционал **/
  dungeon = "dungeon"
}

/** Существо имеет атаку и здоровье, другие свойства пока не включаем **/
export interface ICreatureCard extends ICard {
  attack: number;
  health: number;
  /** кандидаты - свойства **/
  // скорость перемещения по всем землям
  // velocity: number;
}

export interface ITreasureCard extends ICard {
  /** эффекты которые может оказывать сокровище **/
  effects: Record<ITreasureEffect, number | undefined>;
}

export enum ITreasureEffect {
  gold = "gold",
  health = "health",
  attack = "attack"
}
